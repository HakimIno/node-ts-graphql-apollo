import { Joiful } from './joiful';
import { Validator } from './validation';
export { Validator, MultipleValidationError, ValidationResult, isValidationPass, isValidationFail } from './validation';
export { Joiful } from './joiful';
export declare const DEFAULT_INSTANCE: Joiful;
declare const validate: <T extends {} | null | undefined>(target: T, options?: import("./validation").ValidationOptions | undefined) => import("./validation").ValidationResult<T>, validateAsClass: <TClass extends import("./core").Constructor<any>, TInstance = TClass extends import("./core").Constructor<infer TInstance_1> ? TInstance_1 : never>(target: Partial<TInstance> | null | undefined, Class: TClass, options?: import("./validation").ValidationOptions | undefined) => import("./validation").ValidationResult<TInstance>, validateArrayAsClass: <TClass extends import("./core").Constructor<any>, TInstance = TClass extends import("./core").Constructor<infer TInstance_1> ? TInstance_1 : never>(target: Partial<TInstance>[], Class: TClass, options?: import("./validation").ValidationOptions | undefined) => import("./validation").ValidationResult<TInstance[]>;
declare const any: () => import("./decorators/common").PropertyDecorator<any, import("./decorators/any").AnySchemaModifiers>, array: (options?: import("./decorators/array").ArrayPropertyDecoratorOptions | undefined) => import("./decorators/common").PropertyDecorator<any[], import("./decorators/array").ArraySchemaModifiers>, boolean: () => import("./decorators/common").PropertyDecorator<Boolean, import("./decorators/boolean").BooleanSchemaModifiers>, date: () => import("./decorators/common").PropertyDecorator<Date, import("./decorators/date").DateSchemaModifiers>, func: () => import("./decorators/common").PropertyDecorator<Function, import("./decorators/function").FunctionSchemaModifiers>, joi: import("joi").Root, link: (ref?: string | undefined) => import("./decorators/common").PropertyDecorator<any, import("./decorators/link").LinkSchemaModifiers>, number: () => import("./decorators/common").PropertyDecorator<number, import("./decorators/number").NumberSchemaModifiers>, object: (options?: import("./decorators/object").ObjectPropertyDecoratorOptions | undefined) => import("./decorators/common").PropertyDecorator<object, import("./decorators/object").ObjectSchemaModifiers>, string: () => import("./decorators/common").PropertyDecorator<string, import("./decorators/string").StringSchemaModifiers>, validateParams: (options?: {
    validator?: Validator | undefined;
} | undefined) => MethodDecorator, getSchema: (Class: import("./core").AnyClass) => import("joi").ObjectSchema<any> | undefined, hasSchema: (Class: import("./core").AnyClass) => boolean;
export { any, array, boolean, date, func, joi, link, number, object, string, validate, validateAsClass, validateArrayAsClass, validateParams, getSchema, hasSchema, };
