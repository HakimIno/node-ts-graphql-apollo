"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createArrayPropertyDecorator = exports.getArraySchemaModifierProviders = void 0;
const core_1 = require("../core");
const common_1 = require("./common");
const any_1 = require("./any");
function getArraySchemaModifierProviders(getJoi) {
    const result = Object.assign(Object.assign({}, any_1.getAnySchemaModifierProviders(getJoi)), { items: (...args) => ({ schema }) => {
            const [firstArg] = args;
            const itemSchemas = [];
            if (args.length === 1 && typeof firstArg === 'function') {
                const itemSchemaBuilder = firstArg;
                const result = itemSchemaBuilder(getJoi());
                itemSchemas.push(...result instanceof Array ? result : [result]);
            }
            else {
                itemSchemas.push(...args);
            }
            return schema.items(...itemSchemas);
        }, exactLength: (length) => ({ schema }) => schema.length(length), max: (limit) => ({ schema }) => schema.max(limit), min: (limit) => ({ schema }) => schema.min(limit), ordered: (...args) => ({ schema }) => {
            const [firstArg] = args;
            const itemSchemas = [];
            if (args.length === 1 && typeof firstArg === 'function') {
                const itemSchemaBuilder = firstArg;
                const result = itemSchemaBuilder(getJoi());
                itemSchemas.push(...result);
            }
            else {
                itemSchemas.push(...args);
            }
            return schema.ordered(...itemSchemas);
        }, single: (enabled) => ({ schema }) => schema.single(enabled), sparse: (enabled) => ({ schema }) => schema.sparse(enabled), unique: () => ({ schema }) => schema.unique() });
    return result;
}
exports.getArraySchemaModifierProviders = getArraySchemaModifierProviders;
const createArrayPropertyDecorator = (options, joifulOptions) => {
    return common_1.createPropertyDecorator()(({ joi }) => {
        let schema = joi.array();
        const elementClass = (options && options.elementClass);
        if (elementClass) {
            const elementSchema = core_1.getJoiSchema(elementClass, joi);
            if (elementSchema) {
                schema = schema.items(elementSchema);
            }
        }
        return schema;
    }, getArraySchemaModifierProviders, joifulOptions);
};
exports.createArrayPropertyDecorator = createArrayPropertyDecorator;
//# sourceMappingURL=array.js.map